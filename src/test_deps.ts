import { INFINITY } from "./lang/consts.ts";
import { isFunction } from "./lang/isFunction.ts";

export {
  assertArrayIncludes,
  assertEquals,
  assertExists,
  assertMatch,
  assertNotEquals,
  assertNotMatch,
  assertNotStrictEquals,
  assertObjectMatch,
  assertStrictEquals,
  assertStringIncludes,
  assertThrows,
  assertThrowsAsync,
} from "https://x.nest.land/std@0.90.0/testing/asserts.ts";

export { delay } from "https://deno.land/std@0.90.0/async/mod.ts";

export const booleans = [true, false];
export const numbers = [0, INFINITY, -INFINITY, NaN];
export const falsey = [, null, undefined, false, 0, NaN, ""];
export const empties = [[], {}].concat(falsey.slice(1));
export const errors = [
  new Error(),
  new EvalError(),
  new RangeError(),
  new ReferenceError(),
  new SyntaxError(),
  new TypeError(),
  new URIError(),
];
export const typedArrays = [
  Float32Array,
  Float64Array,
  Int8Array,
  Int16Array,
  Int32Array,
  Uint8Array,
  Uint8ClampedArray,
  Uint16Array,
  Uint32Array,
];
// @ts-ignore: it's a test where type is non-important
export const arrayViews = typedArrays.concat(DataView);

/** List of combining diacritical marks. */
export const comboMarks = [
  "\u0300",
  "\u0301",
  "\u0302",
  "\u0303",
  "\u0304",
  "\u0305",
  "\u0306",
  "\u0307",
  "\u0308",
  "\u0309",
  "\u030a",
  "\u030b",
  "\u030c",
  "\u030d",
  "\u030e",
  "\u030f",
  "\u0310",
  "\u0311",
  "\u0312",
  "\u0313",
  "\u0314",
  "\u0315",
  "\u0316",
  "\u0317",
  "\u0318",
  "\u0319",
  "\u031a",
  "\u031b",
  "\u031c",
  "\u031d",
  "\u031e",
  "\u031f",
  "\u0320",
  "\u0321",
  "\u0322",
  "\u0323",
  "\u0324",
  "\u0325",
  "\u0326",
  "\u0327",
  "\u0328",
  "\u0329",
  "\u032a",
  "\u032b",
  "\u032c",
  "\u032d",
  "\u032e",
  "\u032f",
  "\u0330",
  "\u0331",
  "\u0332",
  "\u0333",
  "\u0334",
  "\u0335",
  "\u0336",
  "\u0337",
  "\u0338",
  "\u0339",
  "\u033a",
  "\u033b",
  "\u033c",
  "\u033d",
  "\u033e",
  "\u033f",
  "\u0340",
  "\u0341",
  "\u0342",
  "\u0343",
  "\u0344",
  "\u0345",
  "\u0346",
  "\u0347",
  "\u0348",
  "\u0349",
  "\u034a",
  "\u034b",
  "\u034c",
  "\u034d",
  "\u034e",
  "\u034f",
  "\u0350",
  "\u0351",
  "\u0352",
  "\u0353",
  "\u0354",
  "\u0355",
  "\u0356",
  "\u0357",
  "\u0358",
  "\u0359",
  "\u035a",
  "\u035b",
  "\u035c",
  "\u035d",
  "\u035e",
  "\u035f",
  "\u0360",
  "\u0361",
  "\u0362",
  "\u0363",
  "\u0364",
  "\u0365",
  "\u0366",
  "\u0367",
  "\u0368",
  "\u0369",
  "\u036a",
  "\u036b",
  "\u036c",
  "\u036d",
  "\u036e",
  "\u036f",
  "\ufe20",
  "\ufe21",
  "\ufe22",
  "\ufe23",
];
